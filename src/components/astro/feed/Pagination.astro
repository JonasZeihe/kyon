---
// src/components/feed/Pagination.astro
type Props = { page?: number; pages?: number; base?: string }
const { page = 1, pages = 1, base = '/page' } = Astro.props as Props

function href(n: number): string {
  return n === 1 ? '/' : `${base}/${n}`
}

function windowedRange(p: number, total: number): (number | '…')[] {
  const win = 1
  const visible: number[] = []
  for (let i = 1; i <= total; i++) {
    if (i === 1 || i === total || Math.abs(i - p) <= win) visible.push(i)
  }
  const out: (number | '…')[] = []
  let prev = 0
  for (const n of visible) {
    if (prev && n - prev > 1) out.push('…')
    out.push(n)
    prev = n
  }
  return out
}

const items = windowedRange(page, pages)
---

{
  pages > 1 && (
    <nav class="pagination" aria-label="Pagination">
      <a
        class="nav prev"
        href={href(Math.max(1, page - 1))}
        aria-disabled={page === 1}
        tabindex={page === 1 ? -1 : 0}
      >
        ←
      </a>
      <ul class="list">
        {items.map((it) =>
          typeof it === 'number' ? (
            <li>
              <a
                class={`num ${it === page ? 'active' : ''}`}
                href={href(it)}
                aria-current={it === page ? 'page' : undefined}
              >
                {it}
              </a>
            </li>
          ) : (
            <li class="gap" aria-hidden="true">
              …
            </li>
          )
        )}
      </ul>
      <a
        class="nav next"
        href={href(Math.min(pages, page + 1))}
        aria-disabled={page === pages}
        tabindex={page === pages ? -1 : 0}
      >
        →
      </a>
    </nav>
  )
}

<style>
  .pagination {
    display: flex;
    gap: 10px;
    align-items: center;
    justify-content: center;
    margin-top: 8px;
  }
  .list {
    display: flex;
    gap: 6px;
    list-style: none;
    margin: 0;
    padding: 0;
  }
  .num {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    min-width: 36px;
    height: 36px;
    padding: 0 10px;
    border: 1px solid var(--c-border);
    border-radius: 8px;
    background: var(--c-surface);
    color: var(--c-text);
    text-decoration: none;
    font-weight: 600;
  }
  .num:hover {
    background: var(--c-bg);
  }
  .num.active {
    border-color: var(--c-primary);
    box-shadow: 0 0 0 2px color-mix(in srgb, var(--c-primary) 20%, transparent);
    color: var(--c-text);
  }
  .gap {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    min-width: 36px;
    height: 36px;
    color: var(--c-text-subtle);
  }
  .nav {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 36px;
    height: 36px;
    border: 1px solid var(--c-border);
    border-radius: 8px;
    background: var(--c-surface);
    color: var(--c-text);
    text-decoration: none;
    font-weight: 700;
  }
  .nav[aria-disabled='true'] {
    opacity: 0.5;
    pointer-events: none;
  }
  .nav:hover {
    background: var(--c-bg);
  }
</style>
