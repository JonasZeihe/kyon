---
import type { Post } from '../../lib/content'
const { post } = Astro.props as { post: Post }
const BASE = ((import.meta.env.BASE_URL || '/') + '').replace(/\/?$/, '/')
const href = `${BASE}entries/${encodeURIComponent(post.slug)}`
const hasImg = Boolean(post?.image && post.image.src)
function fmt(d: string | undefined): string {
  if (!d) return ''
  const x = new Date(d)
  if (Number.isNaN(x.getTime())) return d
  const y = x.getFullYear()
  const m = String(x.getMonth() + 1).padStart(2, '0')
  const day = String(x.getDate()).padStart(2, '0')
  return `${y}-${m}-${day}`
}
---

<article class="card">
  <a class="inner" href={href}>
    {
      hasImg && (
        <div class="thumb">
          <img
            src={post.image!.src}
            alt={post.image!.alt || post.title}
            loading="lazy"
            decoding="async"
          />
        </div>
      )
    }
    <div class="body">
      <h3 class="title">{post.title}</h3>
      <p class="desc">{post.description}</p>
      <div class="meta">
        <span class="date">{fmt(post.date)}</span>
        {post.minutes ? <span class="sep">Â·</span> : null}
        {post.minutes ? <span class="read">{post.minutes} min</span> : null}
      </div>
      {
        post.tags?.length ? (
          <ul class="tags">
            {post.tags.slice(0, 4).map((t: string) => (
              <li>{t}</li>
            ))}
          </ul>
        ) : null
      }
    </div>
  </a>
</article>

<style>
  .card {
    background: var(--c-surface);
    border: 1px solid var(--c-border);
    border-radius: 12px;
    overflow: hidden;
    transition:
      transform 0.12s ease,
      box-shadow 0.12s ease,
      border-color 0.12s ease;
  }
  .card:hover {
    transform: translateY(-1px);
    box-shadow: 0 10px 26px rgba(0, 0, 0, 0.1);
    border-color: color-mix(in oklab, var(--c-border) 50%, var(--c-accent) 50%);
  }
  .inner {
    display: grid;
    grid-template-columns: 1fr;
    color: inherit;
    text-decoration: none;
  }
  .thumb {
    width: 100%;
    aspect-ratio: 16/9;
    overflow: hidden;
    background: var(--c-bg);
  }
  .thumb img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;
  }
  .body {
    display: grid;
    gap: 8px;
    padding: 14px;
  }
  .title {
    margin: 0;
    line-height: 1.22;
    font-size: 1.06rem;
    color: var(--c-text);
  }
  .desc {
    margin: 0;
    color: var(--c-text);
    opacity: 0.92;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  .meta {
    display: flex;
    gap: 8px;
    align-items: center;
    font-size: 0.86rem;
    color: var(--c-text-subtle);
  }
  .sep {
    opacity: 0.6;
  }
  .tags {
    display: flex;
    gap: 8px;
    margin: 0;
    padding: 0;
    list-style: none;
    flex-wrap: wrap;
  }
  .tags li {
    padding: 2px 8px;
    border-radius: 999px;
    border: 1px solid var(--c-border);
    font-size: 0.78rem;
    color: var(--c-text-subtle);
    background: color-mix(in oklab, var(--c-bg) 75%, transparent);
  }
</style>
